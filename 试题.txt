试题
以下代码使用自定义迭代器实现从0开始迭代到n-1并打印
class MyIterator:
    def __init__(self, limit):
        self.limit = limit
        self.current = 0

    #使对象变成可迭代的对象，返回对象本身
    def __iter__(self):
        return self
    #决定了迭代器的行为，每次迭代检查current是否小于limit，如果未达到上限，current+1准备下次迭代，返回当前值current。    def __next__(self):
        if self.current < self.limit:
            result = self.current
            self.current += 1
            return result
        else:
            raise StopIteration

# 使用自定义迭代器
my_iter = MyIterator(5)
for i in my_iter:
    print(i)

result:
0 1 2 3 4

请将该自定义迭代器的实现改成生成器的实现
参考资料：https://www.runoob.com/python3/python3-iterator-generator.html











答案
def my_generator(limit):
    current = 0
    while current < limit:
        yield current
        current += 1

# 使用生成器
for i in my_generator(5):
    print(i)

迭代器是一个实现了 __iter__() 和 __next__() 方法的对象，是基于类实现的
Python 中任意的对象，只要它定义了可以返回一个迭代器的__iter__方法，或者定义了可以支持下标索引的__getitem__方法，那么它就是一个可迭代对象(如: tuple, list, dict)，迭代器不会一次性把所有元素加载到内存，而是需要的时候才生成返回结果，迭代器可以通过for循环进行迭代

生成器可以认为是一个简化版的迭代器，是基于函数实现的，在函数中使用关键字“yield” 而不是通常用的return. yield作为生成器执行的暂停恢复点, 每次调用next, 生成器函数执行到yield语句, 会挂起,并保存当前的上下文信息. 知道下一个next触发生成器继续执行.
但迭代器不是生成器，因为迭代器没有传入数据功能。生成器可以传入数据进行计算(不同于迭代器)，并根据变量内容计算结果后返回。

迭代器在处理大数据时非常有效，因为它们按需生成数据而不是一次性将所有数据加载到内存中。以下是一些常见应用：
文件读写：逐行读取非常大的文件，而不是将整个文件加载到内存中。
数据流处理：实时处理数据流，比如网络请求。