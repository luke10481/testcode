import datetime
import jwt
from flask import Flask, request, jsonify
from functools import wraps

app = Flask(__name__)

# 配置密钥，用于加密JWT
app.config['SECRET_KEY'] = 'your_secret_key'

# 模拟的机器信息，通常保存在数据库中
machines = {
    "machine_001": "machine_secret_001",  # appid -> api_key
    "machine_002": "machine_secret_002"
}

# 装饰器，用于验证JWT
def token_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = None

        # 检查请求头中是否包含Authorization字段
        if 'Authorization' in request.headers:
            token = request.headers['Authorization'].split(" ")[1]  # 去掉"Bearer"前缀

        if not token:
            return jsonify({'message': 'Token is missing!'}), 403

        try:
            # 解码JWT，验证其有效性
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
            appid = data['appid']
        except jwt.ExpiredSignatureError:
            return jsonify({'message': 'Token has expired!'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'message': 'Invalid token!'}), 401

        # 将appid传递给视图函数
        return f(appid, *args, **kwargs)

    return decorated_function

# 获取JWT的接口，用于机器获取访问Token
@app.route('/get_token', methods=['POST'])
def get_token():
    auth = request.get_json()

    # 获取机器的appid和密钥
    appid = auth.get('appid')
    api_key = auth.get('api_key')

    # 验证appid和api_key（这通常保存在数据库中）
    if appid in machines and machines[appid] == api_key:
        # 创建JWT，设置过期时间
        token = jwt.encode({
            'appid': appid,  # 机器的标识
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)
        }, app.config['SECRET_KEY'], algorithm="HS256")

        return jsonify({'token': token})

    return jsonify({'message': 'Invalid appid or api_key'}), 401

# 受保护的接口
@app.route('/protected', methods=['GET'])
@token_required
def protected(appid):
    return jsonify({'message': f'Machine {appid} accessed the protected route.'})

if __name__ == '__main__':
    app.run(debug=True)
